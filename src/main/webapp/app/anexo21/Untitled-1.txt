
 alumnos?: IAlumno[];
  traerdatos: Alumno | undefined | null ;
  
 
  alumnosSharedCollection: IAlumno[] = [];
  editForm = this.fb.group({
    alumno: [],
  });
  isLoading: boolean | undefined;
  itemsPerPage: any;
  page?: number | undefined;
  predicate!: string;
  ascending!: boolean;
  totalItems: number | undefined;
  router: any;
  ngbPaginationPage: number | undefined;

  constructor(
    protected activatedRoute: ActivatedRoute,
    protected alumnoService: AlumnoService,
    protected fb: FormBuilder,
    ) { }

    

    filtrar(page?: number, dontNavigate?: boolean): void {
 
    
      this.isLoading = true;
      const pageToLoad: number = page ?? this.page ?? 1;
  
      this.alumnoService
  
        .queryalumnoxdni(
          this.traerdatos?.dni,{
          page: pageToLoad - 1,
          size: this.itemsPerPage,
          sort: this.sort(),
        })

        .subscribe(
          (res: HttpResponse<IAlumno[]>) => {
            this.isLoading = false;
            this.onSuccess(res.body, res.headers, pageToLoad, !dontNavigate);
          },
          () => {
            this.isLoading = false;
            this.onError();
          }
        );
 
    }
 
  
  
  
  ngOnInit(): void {
    this.loadRelationshipsOptions();
    this.handleNavigation();
  }

  trackAlumnoById(index: number, item: IAlumno): number {
    return item.id!;
  }
 
  trackId(index: number, item: IAlumno): number {
    return item.id!;
  }

  protected sort(): string[] {
    const result = [this.predicate + ',' + (this.ascending ? 'asc' : 'desc')];
    if (this.predicate !== 'id') {
      result.push('id');
    }
    return result;
  }

  protected onSuccess(data: IAlumno[] | null, headers: HttpHeaders, page: number, navigate: boolean): void {
    this.totalItems = Number(headers.get('X-Total-Count'));
    this.page = page;
    if (navigate) {
      this.router.navigate(['/alumno '], {
        queryParams: {
          page: this.page,
          size: this.itemsPerPage,
          sort: this.predicate + ',' + (this.ascending ? 'asc' : 'desc'),
        },
      });
    }
    this.alumnos = data ?? [];
    this.ngbPaginationPage = this.page;
  }

  protected onError(): void {
    this.ngbPaginationPage = this.page ?? 1;
  }

  protected loadRelationshipsOptions(): void {
    this.alumnoService
      .query()
      .pipe(map((res: HttpResponse<IAlumno[]>) => res.body ?? []))
      .pipe(map((alumnos: IAlumno[]) => this.alumnoService.addAlumnoToCollectionIfMissing(alumnos, this.editForm.get('alumno')!.value)))
      .subscribe((alumnos: IAlumno[]) => (this.alumnosSharedCollection = alumnos));
  }

  protected handleNavigation(): void {
    combineLatest([this.activatedRoute.data, this.activatedRoute.queryParamMap]).subscribe(([data, params]) => {
      const page = params.get('page');
      const pageNumber = page !== null ? +page : 1;
      const sort = (params.get('sort') ?? data['defaultSort']).split(',');
      const predicate = sort[0];
      const ascending = sort[1] === 'asc';
      if (pageNumber !== this.page || predicate !== this.predicate || ascending !== this.ascending) {
        this.predicate = predicate;
        this.ascending = ascending;
        this.filtrar(pageNumber, true);
      }
    });
  }
 

}